type WithdrawReceipt = 
 variant {
   Err: WithdrawErr;
   Ok: nat;
 };
type WithdrawErr = 
 variant {
   BalanceLow;
   TransferFailure;
   WithdrawBeforeMaturityDate;
 };
type Value = 
 variant {
   Blob: blob;
   Int: int;
   Nat: nat;
   Text: text;
 };
type TxStatus = 
 variant {
   failed;
   succeeded;
 };
type TxIndex__1 = nat;
type TxIndex = nat;
type TransferResult = 
 variant {
   Err: TransferError;
   Ok: TxIndex;
 };
type TransferError = 
 variant {
   BadBurn: record {min_burn_amount: Balance;};
   BadFee: record {expected_fee: Balance;};
   CreatedInFuture: record {ledger_time: Timestamp;};
   Duplicate: record {duplicate_of: TxIndex;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientFunds: record {balance: Balance;};
   TemporarilyUnavailable;
   TooOld;
 };
type TransferArgs = 
 record {
   amount: Balance;
   created_at_time: opt nat64;
   fee: opt Balance;
   from_subaccount: opt Subaccount;
   memo: opt blob;
   to: Account;
 };
type Transfer = 
 record {
   amount: Balance;
   created_at_time: opt nat64;
   fee: opt Balance;
   from: Account;
   memo: opt blob;
   to: Account;
 };
type Transaction__1 = 
 record {
   burn: opt Burn;
   index: TxIndex;
   kind: text;
   mint: opt Mint__1;
   timestamp: Timestamp;
   transfer: opt Transfer;
 };
type TransactionRange = record {transactions: vec Transaction;};
type Transaction = 
 record {
   burn: opt Burn;
   index: TxIndex;
   kind: text;
   mint: opt Mint__1;
   timestamp: Timestamp;
   transfer: opt Transfer;
 };
type TokenInitArgs = 
 record {
   advanced_settings: opt AdvancedSettings;
   decimals: nat8;
   fee: Balance;
   initial_balances: vec record {
                           Account;
                           Balance;
                         };
   max_supply: Balance;
   min_burn_amount: Balance;
   minting_account: opt Account;
   name: text;
   symbol: text;
 };
type Timestamp = nat64;
type Time = int;
type SupportedStandard = 
 record {
   name: text;
   url: text;
 };
type Subaccount = blob;
type RepayPrincipalReceipt = 
 variant {
   Err: RepayPrincipalErr;
   Ok: nat;
 };
type RepayPrincipalErr = 
 variant {
   BalanceLow;
   TransferFailure;
   ZeroAmountTransfer;
 };
type RepayInterestReceipt = 
 variant {
   Err: RepayInterestErr;
   Ok: nat;
 };
type RepayInterestErr = 
 variant {
   BalanceLow;
   TransferFailure;
   ZeroAmountTransfer;
 };
type QueryArchiveFn = func (GetTransactionsRequest__1) ->
                       (TransactionRange) query;
type PoolTxRecord = 
 record {
   amount: nat;
   caller: opt principal;
   fee: nat;
   from: principal;
   index: nat;
   op: PoolOperation;
   status: TxStatus;
   timestamp: Time;
   to: principal;
 };
type PoolStatus__1 = 
 variant {
   active;
   closed;
   default;
   open;
   pending;
 };
type PoolStatus = 
 variant {
   active;
   closed;
   default;
   open;
   pending;
 };
type PoolRecord = 
 record {
   apr: text;
   borrowers: vec principal;
   credit_rating: text;
   description: text;
   fundrise_end_time: Time;
   id: principal;
   issuer_description: text;
   issuer_picture: text;
   loan_term: text;
   maturity_date: Time;
   origination_date: Time;
   payment_frequency: text;
   secured_by: text;
   smart_contract_url: text;
   status: PoolStatus__1;
   timestamp: Time;
   title: text;
   total_loan_amount: nat;
 };
type PoolOperation = 
 variant {
   deposit;
   drawdown;
   init;
   repayInterest;
   repayPrincipal;
   withdraw;
 };
type Pool = 
 service {
   balance_of: (principal) -> (nat) query;
   burn: (BurnArgs) -> (TransferResult);
   convert_to_assets: (nat) -> (nat);
   convert_to_shares: (nat) -> (nat);
   deposit: (nat) -> (DepositReceipt);
   drawdown: () -> (DrawdownReceipt);
   fee_calc: (nat) -> (nat);
   get_asset: () -> (principal) query;
   get_borrower: () -> (vec principal);
   get_decimal_offset: () -> (nat8);
   get_deposit_address: () -> (text);
   get_fee: () -> (Fee__1) query;
   get_info: () -> (PoolRecord) query;
   get_pool_transaction: (nat) -> (PoolTxRecord) query;
   get_pool_transactions: (nat, nat) -> (vec PoolTxRecord) query;
   get_total_fund: () -> (nat) query;
   get_transaction: (TxIndex__1) -> (opt Transaction__1);
   get_transactions: (GetTransactionsRequest) ->
    (GetTransactionsResponse) query;
   get_user_transactons: (principal, nat, nat) -> (vec PoolTxRecord) query;
   history_size: () -> (nat) query;
   icrc1_balance_of: (Account__1) -> (Balance__1) query;
   icrc1_decimals: () -> (nat8) query;
   icrc1_fee: () -> (Balance__1) query;
   icrc1_metadata: () -> (vec MetaDatum) query;
   icrc1_minting_account: () -> (opt Account__1) query;
   icrc1_name: () -> (text) query;
   icrc1_supported_standards: () -> (vec SupportedStandard) query;
   icrc1_symbol: () -> (text) query;
   icrc1_total_supply: () -> (Balance__1) query;
   icrc1_transfer: (TransferArgs) -> (TransferResult);
   mint: (Mint) -> (TransferResult);
   next_interest_repayment: () -> (nat);
   next_interest_repayment_deadline: () -> (opt Time);
   next_principal_repayment: () -> (nat);
   next_principal_repayment_deadline: () -> (opt Time);
   remove_borrower: (principal) -> () oneway;
   repay_interest: () -> (RepayInterestReceipt);
   repay_principal: () -> (RepayPrincipalReceipt);
   set_borrower: (principal) -> () oneway;
   set_decimal_offset: (nat8) -> (nat8);
   set_fee: (Fee__1) -> (Fee__1);
   trigger_closed: () -> (PoolStatus);
   trigger_default: () -> (PoolStatus);
   withdraw: (nat) -> (WithdrawReceipt);
 };
type Mint__1 = 
 record {
   amount: Balance;
   created_at_time: opt nat64;
   memo: opt blob;
   to: Account;
 };
type Mint = 
 record {
   amount: Balance;
   created_at_time: opt nat64;
   memo: opt blob;
   to: Account;
 };
type MetaDatum = 
 record {
   text;
   Value;
 };
type LoanStatus = 
 variant {
   active;
   approved;
   rejected;
 };
type LoanInfo = 
 record {
   apr: text;
   credit_rating: text;
   description: text;
   issuer_description: text;
   issuer_picture: text;
   loan_term: text;
   payment_frequency: text;
   secured_by: text;
   title: text;
 };
type Loan = 
 record {
   asset: principal;
   borrowers: vec principal;
   finder_fee: nat;
   fundrise_end_time: Time;
   index: opt nat;
   info: LoanInfo;
   interest_payment_deadline: vec Time;
   interest_rate: nat;
   interest_schedule: vec nat;
   late_fee: nat;
   maturity_date: Time;
   origination_date: Time;
   principal_payment_deadline: vec Time;
   principal_schedule: vec nat;
   status: opt LoanStatus;
   total_loan_amount: nat;
 };
type InitPool = 
 record {
   fee: Fee;
   loan: Loan;
   token_args: TokenInitArgs;
 };
type GetTransactionsResponse = 
 record {
   archived_transactions: vec ArchivedTransaction;
   first_index: TxIndex;
   log_length: nat;
   transactions: vec Transaction;
 };
type GetTransactionsRequest__1 = 
 record {
   length: nat;
   start: TxIndex;
 };
type GetTransactionsRequest = 
 record {
   length: nat;
   start: TxIndex;
 };
type Fee__1 = 
 record {
   fee: nat;
   fee_basis_point: nat;
   treasury: principal;
 };
type Fee = 
 record {
   fee: nat;
   fee_basis_point: nat;
   treasury: principal;
 };
type DrawdownReceipt = 
 variant {
   Err: DrawdownErr;
   Ok: nat;
 };
type DrawdownErr = 
 variant {
   BalanceLow;
   BeforeOriginationDate;
   InvalidDrawdown;
   NotAuthorized;
   TransferFailure;
 };
type DepositReceipt = 
 variant {
   Err: DepositErr;
   Ok: nat;
 };
type DepositErr = 
 variant {
   BalanceLow;
   FundriseTimeEnded;
   TransferFailure;
 };
type BurnArgs = 
 record {
   amount: Balance;
   created_at_time: opt nat64;
   from_subaccount: opt Subaccount;
   memo: opt blob;
 };
type Burn = 
 record {
   amount: Balance;
   created_at_time: opt nat64;
   from: Account;
   memo: opt blob;
 };
type Balance__1 = nat;
type Balance = nat;
type ArchivedTransaction = 
 record {
   callback: QueryArchiveFn;
   length: nat;
   start: TxIndex;
 };
type AdvancedSettings = 
 record {
   burned_tokens: Balance;
   permitted_drift: Timestamp;
   transaction_window: Timestamp;
 };
type Account__1 = 
 record {
   owner: principal;
   subaccount: opt Subaccount;
 };
type Account = 
 record {
   owner: principal;
   subaccount: opt Subaccount;
 };
service : (InitPool) -> Pool
