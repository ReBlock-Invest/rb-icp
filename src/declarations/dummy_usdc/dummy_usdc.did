type TxRecord = 
 record {
   amount: nat;
   caller: opt principal;
   fee: nat;
   from: principal;
   index: nat;
   op: Operation;
   status: TransactionStatus;
   timestamp: Time;
   to: principal;
 };
type TxReceipt = 
 variant {
   Err:
    variant {
      AmountTooSmall;
      BlockUsed;
      ErrorOperationStyle;
      ErrorTo;
      InsufficientAllowance;
      InsufficientBalance;
      LedgerTrap;
      Other;
      Unauthorized;
    };
   Ok: nat;
 };
type TransactionStatus = 
 variant {
   failed;
   inprogress;
   succeeded;
 };
type TokenInfo = 
 record {
   cycles: nat;
   deployTime: Time;
   feeTo: principal;
   historySize: nat;
   holderNumber: nat;
   metadata: Metadata;
 };
type Token = 
 service {
   allowance: (principal, principal) -> (nat) query;
   /// Allows spender to withdraw from your account multiple times, up to the value amount.
   /// If this function is called again it overwrites the current allowance with value.
   approve: (principal, nat) -> (TxReceipt);
   balanceOf: (principal) -> (nat) query;
   burn: (nat) -> (TxReceipt);
   decimals: () -> (nat8) query;
   getAllowanceSize: () -> (nat) query;
   getHolders: (nat, nat) -> (vec record {
                                    principal;
                                    nat;
                                  }) query;
   getMetadata: () -> (Metadata) query;
   getTokenFee: () -> (nat) query;
   getTokenInfo: () -> (TokenInfo) query;
   /// Get transaction by index.
   getTransaction: (nat) -> (TxRecord) query;
   /// Get history
   getTransactions: (nat, nat) -> (vec TxRecord) query;
   getUserApprovals: (principal) -> (vec record {
                                           principal;
                                           nat;
                                         }) query;
   getUserTransactionAmount: (principal) -> (nat) query;
   getUserTransactions: (principal, nat, nat) -> (vec TxRecord) query;
   /// Get transaction history size
   historySize: () -> (nat) query;
   logo: () -> (text) query;
   mint: (principal, nat) -> (TxReceipt);
   name: () -> (text) query;
   setFee: (nat) -> () oneway;
   setFeeTo: (principal) -> () oneway;
   setLogo: (text) -> () oneway;
   setName: (text) -> () oneway;
   setOwner: (principal) -> () oneway;
   symbol: () -> (text) query;
   totalSupply: () -> (nat) query;
   /// Transfers value amount of tokens to Principal to.
   transfer: (principal, nat) -> (TxReceipt);
   /// Transfers value amount of tokens from Principal from to Principal to.
   transferFrom: (principal, principal, nat) -> (TxReceipt);
 };
type Time = int;
type Operation = 
 variant {
   approve;
   burn;
   mint;
   transfer;
   transferFrom;
 };
type Metadata = 
 record {
   decimals: nat8;
   fee: nat;
   logo: text;
   name: text;
   owner: principal;
   symbol: text;
   totalSupply: nat;
 };
service : (text, text, text, nat8, nat, principal, nat) -> Token
